@charset "UTF-8";
//===== Scaffolding ==============================

$body-width-min: 1100px !default;
$mobile-breakpoint: 480px !default;
$banner-width: 1920px !default;

$header-height: 100px !default;
$footer-height: 200px !default;

//--------------------------------------------------------
// 默认响应式断点：480, 768, 992, 1200
//    要修改的话，在变量设置的 276 行（Media queries breakpoints）
// 容器宽度分别为：100%, 720+30, 940+30, 1140+30
//    要修改的话，在变量设置的 332 行（Container sizes）
//
// 默认情况下输出的样式，可见默认的断点和容器大小如下：
//    @media (min-width: 768px) {
//      .container {
//        width: 750px;
//      }
//    }
//    @media (min-width: 992px) {
//      .container {
//        width: 970px;
//      }
//    }
//    @media (min-width: 1200px) {
//      .container {
//        width: 1100px;
//      }
//    }
//--------------------------------------------------------
//
// ★如果要完全取消 bootstrap 的响应式行为（仅保留PC端，即宽屏），
//   观察源码，使用的是 min-width 查询，因此需要做的就是把断点值尽可能设置得小一点。
//   可以把sm，md，lg的断点分别修改为 1px, 2px, 3px(为了调试方便加以区分)
//  （因为源码使用的是 min-width，按照覆盖的规则，实际上媒体查询就只剩 lg 下的起效了。）
//
// 然后按照需求在自己的样式中为 .container 设定一个宽度：
//   注意 .container 的宽度不可大于body的最小宽度，否则会溢出。
//   【一般设计成 容器宽度 与 body最小宽度 相同即可：】
$container-width: $body-width-min;
// 注意 .container 有左右 padding，会被嵌套其中的 .row 的负margin 抵消，正确嵌套即可；
//   不要随便移除 .container 的左右 padding，否则 .row 将超出 .container 的宽度，
//   如要移除，就不要嵌套 .row
//
// bootstrap 的 .container 与我平时实现的 .container > .content 的通栏设计有（类名）冲突，
//  如果需要通栏设计，则另外在.container外包裹一层吧。
// （bootstrap 提供的组件中，导航栏是带有通栏设计的，用 .navbar > .container 的结构，.navbar有底色。）
//
//---------------------------------------------------------
//
// ★如果要保留两段响应式（超窄屛xs 和 PC端），
//   那么断点就应该只有一个，就是超窄屛的临界点（xs 默认断点 480px，也可以根据实际情况调整一下）
//   因此把sm，md 和 lg 的断点【都】设置为xs的断点值，这样就只剩两段响应了。
//   （具体来说，就是 $screen-sm, $screen-md 和 $screen-lg 都使用 $screen-xs 的值）
//
// 然后要修改容器的宽度：把 sm，md 和 lg 的 container size 设置为所需的PC端下的 container 宽度即可。
//    （因为断点一致，所以只设置 lg 的亦可，规则相同会被覆盖）
//
// 举个栗子：断点使用xs默认的480px，且PC端下页面主体内容，也即 container 宽度也定为 1100px，输出如下：
//     @media (min-width: 480px) {
//       .container {
//         width: 1100px;
//       }
//     }
//     @media (min-width: 480px) {
//       .container {
//         width: 1100px;
//       }
//     }
//     @media (min-width: 480px) {
//       .container {
//         width: 1100px;
//       }
//     }
//
// ☆ 其实也可以把断点设在一般平板宽度处（768px），这样平板宽度和手机宽度下的视图一样。
//    具体操作，就是把原来的 xs 断点设为 768px，然后 sm，md 和 lg 还是使用 xs 的断点值。
//
// ☆ 实际上，上面关于完全取消响应式设计的方案也可以基于这种保留两段响应式的思路，
//    要抹除移动端的窄屛响应时，只需把移动端断点设置为 0。
//    △见 _basic.scss：.container 的宽度已做好适配，上面调整bootstrap源码中 .container 宽度的步骤也可以省略了。
//
// 注意：要使用这种设计时，不要像纯PC应用那样给body使用 min-width 属性了。
//--------------------------------------------------------

//===== Colors ==================================

//主色
$color-primary: #3d804f !default;
//主色加深
$color-primary-dark: darken($color-primary, 5%) !default;
//主色的补色/反色
$color-primary-invert: invert($color-primary) !default;
//可作为主色的背景色
$color-primary-bg: #222 !default;

//分割线颜色（浅，用于深色背景）（一般为浅色，多数使用半透明效果）
$color-separator-light: rgba(61, 128, 79, 0.3) !default;
//分割线颜色（深，用于浅色背景）
$color-separator-dark: rgba(233, 123, 0, 0.84) !default;
